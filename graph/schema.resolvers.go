package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"fmt"
	"graphql-golang/graph/generated"
	"graphql-golang/graph/model"
	"graphql-golang/internal/app/domain"
	"graphql-golang/internal/app/entity"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	var inputUser = entity.CreateUserRequest{Email: input.Email, Password: input.Password, Username: input.Username}
	result, err := domain.CreateUser(ctx, inputUser)
	if err != nil {
		return nil, err
	}
	var user = model.User{ID: int(result.UID), Username: result.Username, Email: result.Email, CreatedAt: result.CreatedAt.Format("2006-01-02 15:04:05")}
	return &user, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
